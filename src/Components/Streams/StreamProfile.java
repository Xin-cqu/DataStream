// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Components.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Components.Streams;

public class StreamProfile implements Cloneable, java.io.Serializable
{
    public int id; //id for this stream

    public String properties; // size

    public byte[] streamParameter;//File

    public StreamProfile()
    {
    }

    public StreamProfile(int id, String properties, byte[] streamParameter)
    {
        this.id = id;
        this.properties = properties;
        this.streamParameter = streamParameter;
    }

    public boolean
    equals(Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        StreamProfile _r = null;
        if(rhs instanceof StreamProfile)
        {
            _r = (StreamProfile)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(properties != _r.properties)
            {
                if(properties == null || _r.properties == null || !properties.equals(_r.properties))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(streamParameter, _r.streamParameter))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::Components::Streams::StreamProfile");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, properties);
        __h = IceInternal.HashUtil.hashAdd(__h, streamParameter);
        return __h;
    }

    public Object
    clone()
    {
        Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeInt(id);
        __os.writeString(properties);
        StreamParametersHelper.write(__os, streamParameter);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readInt();
        properties = __is.readString();
        streamParameter = StreamParametersHelper.read(__is);
    }

    public static final long serialVersionUID = -2529554508719207087L;
}
