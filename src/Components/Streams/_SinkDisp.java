// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Components.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Components.Streams;

public abstract class _SinkDisp extends Ice.ObjectImpl implements Sink
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws CloneNotSupportedException
    {
        throw new CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Components::Streams::Sink",
        "::Ice::Object"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[0];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[0];
    }

    public static String ice_staticId()
    {
        return __ids[0];
    }

    public final void abortStream(byte[] markerForAbort)
        throws GenericError
    {
        abortStream(markerForAbort, null);
    }

    public final void finalizeTransport(boolean now, Source theSource, Components.TransportProfileHolder tranPro)
        throws GenericError
    {
        finalizeTransport(now, theSource, tranPro, null);
    }

    public final void finishStream(byte[] markerForFinish)
        throws GenericError
    {
        finishStream(markerForFinish, null);
    }

    public final void modifyTransport(Components.TransportProfile tpformodify)
        throws GenericError
    {
        modifyTransport(tpformodify, null);
    }

    public final void releaseTransport()
    {
        releaseTransport(null);
    }

    public final void startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp)
        throws GenericError
    {
        startStream(previous, theMarker, sp, tp, null);
    }

    public static Ice.DispatchStatus ___finalizeTransport(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        boolean now;
        SourceHolder theSource = new SourceHolder();
        now = __is.readBool();
        __is.readObject(theSource);
        __is.readPendingObjects();
        __inS.endReadParams();
        Components.TransportProfileHolder tranPro = new Components.TransportProfileHolder();
        try
        {
            __obj.finalizeTransport(now, theSource.value, tranPro, __current);
            IceInternal.BasicStream __os = __inS.__startWriteParams(Ice.FormatType.DefaultFormat);
            tranPro.value.__write(__os);
            __inS.__endWriteParams(true);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(GenericError ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___modifyTransport(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        Components.TransportProfile tpformodify;
        tpformodify = new Components.TransportProfile();
        tpformodify.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.modifyTransport(tpformodify, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(GenericError ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___releaseTransport(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.readEmptyParams();
        __obj.releaseTransport(__current);
        __inS.__writeEmptyParams();
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus ___startStream(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        PreviouAction previous;
        byte[] theMarker;
        StreamProfile sp;
        Components.TransportProfile tp;
        previous = PreviouAction.__read(__is);
        theMarker = MarkerHelper.read(__is);
        sp = new StreamProfile();
        sp.__read(__is);
        tp = new Components.TransportProfile();
        tp.__read(__is);
        __inS.endReadParams();
        try
        {
            __obj.startStream(previous, theMarker, sp, tp, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(GenericError ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___finishStream(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] markerForFinish;
        markerForFinish = MarkerHelper.read(__is);
        __inS.endReadParams();
        try
        {
            __obj.finishStream(markerForFinish, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(GenericError ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus ___abortStream(Sink __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        byte[] markerForAbort;
        markerForAbort = MarkerHelper.read(__is);
        __inS.endReadParams();
        try
        {
            __obj.abortStream(markerForAbort, __current);
            __inS.__writeEmptyParams();
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(GenericError ex)
        {
            __inS.__writeUserException(ex, Ice.FormatType.DefaultFormat);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    private final static String[] __all =
    {
        "abortStream",
        "finalizeTransport",
        "finishStream",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "modifyTransport",
        "releaseTransport",
        "startStream"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___abortStream(this, in, __current);
            }
            case 1:
            {
                return ___finalizeTransport(this, in, __current);
            }
            case 2:
            {
                return ___finishStream(this, in, __current);
            }
            case 3:
            {
                return ___ice_id(this, in, __current);
            }
            case 4:
            {
                return ___ice_ids(this, in, __current);
            }
            case 5:
            {
                return ___ice_isA(this, in, __current);
            }
            case 6:
            {
                return ___ice_ping(this, in, __current);
            }
            case 7:
            {
                return ___modifyTransport(this, in, __current);
            }
            case 8:
            {
                return ___releaseTransport(this, in, __current);
            }
            case 9:
            {
                return ___startStream(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
