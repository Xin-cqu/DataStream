// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Components.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Components.Streams;

public final class SinkPrxHelper extends Ice.ObjectPrxHelperBase implements SinkPrx
{
    private static final String __abortStream_name = "abortStream";

    public void abortStream(byte[] markerForAbort)
        throws GenericError
    {
        abortStream(markerForAbort, null, false);
    }

    public void abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx)
        throws GenericError
    {
        abortStream(markerForAbort, __ctx, true);
    }

    private void abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws GenericError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "abortStream", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("abortStream");
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.abortStream(markerForAbort, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort)
    {
        return begin_abortStream(markerForAbort, null, false, null);
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx)
    {
        return begin_abortStream(markerForAbort, __ctx, true, null);
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort, Ice.Callback __cb)
    {
        return begin_abortStream(markerForAbort, null, false, __cb);
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_abortStream(markerForAbort, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort, Callback_Sink_abortStream __cb)
    {
        return begin_abortStream(markerForAbort, null, false, __cb);
    }

    public Ice.AsyncResult begin_abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx, Callback_Sink_abortStream __cb)
    {
        return begin_abortStream(markerForAbort, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_abortStream(byte[] markerForAbort, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__abortStream_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __abortStream_name, __cb);
        try
        {
            __result.__prepare(__abortStream_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MarkerHelper.write(__os, markerForAbort);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_abortStream(Ice.AsyncResult __result)
        throws GenericError
    {
        Ice.AsyncResult.__check(__result, this, __abortStream_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(GenericError __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __finalizeTransport_name = "finalizeTransport";

    public void finalizeTransport(boolean now, Source theSource, Components.TransportProfileHolder tranPro)
        throws GenericError
    {
        finalizeTransport(now, theSource, tranPro, null, false);
    }

    public void finalizeTransport(boolean now, Source theSource, Components.TransportProfileHolder tranPro, java.util.Map<String, String> __ctx)
        throws GenericError
    {
        finalizeTransport(now, theSource, tranPro, __ctx, true);
    }

    private void finalizeTransport(boolean now, Source theSource, Components.TransportProfileHolder tranPro, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws GenericError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "finalizeTransport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("finalizeTransport");
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.finalizeTransport(now, theSource, tranPro, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource)
    {
        return begin_finalizeTransport(now, theSource, null, false, null);
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, java.util.Map<String, String> __ctx)
    {
        return begin_finalizeTransport(now, theSource, __ctx, true, null);
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, Ice.Callback __cb)
    {
        return begin_finalizeTransport(now, theSource, null, false, __cb);
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_finalizeTransport(now, theSource, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, Callback_Sink_finalizeTransport __cb)
    {
        return begin_finalizeTransport(now, theSource, null, false, __cb);
    }

    public Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, java.util.Map<String, String> __ctx, Callback_Sink_finalizeTransport __cb)
    {
        return begin_finalizeTransport(now, theSource, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_finalizeTransport(boolean now, Source theSource, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__finalizeTransport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __finalizeTransport_name, __cb);
        try
        {
            __result.__prepare(__finalizeTransport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeBool(now);
            __os.writeObject(theSource);
            __os.writePendingObjects();
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_finalizeTransport(Components.TransportProfileHolder tranPro, Ice.AsyncResult __result)
        throws GenericError
    {
        Ice.AsyncResult.__check(__result, this, __finalizeTransport_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(GenericError __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            tranPro.value = new Components.TransportProfile();
            tranPro.value.__read(__is);
            __result.__endReadParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __finishStream_name = "finishStream";

    public void finishStream(byte[] markerForFinish)
        throws GenericError
    {
        finishStream(markerForFinish, null, false);
    }

    public void finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx)
        throws GenericError
    {
        finishStream(markerForFinish, __ctx, true);
    }

    private void finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws GenericError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "finishStream", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("finishStream");
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.finishStream(markerForFinish, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish)
    {
        return begin_finishStream(markerForFinish, null, false, null);
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx)
    {
        return begin_finishStream(markerForFinish, __ctx, true, null);
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish, Ice.Callback __cb)
    {
        return begin_finishStream(markerForFinish, null, false, __cb);
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_finishStream(markerForFinish, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish, Callback_Sink_finishStream __cb)
    {
        return begin_finishStream(markerForFinish, null, false, __cb);
    }

    public Ice.AsyncResult begin_finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx, Callback_Sink_finishStream __cb)
    {
        return begin_finishStream(markerForFinish, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_finishStream(byte[] markerForFinish, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__finishStream_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __finishStream_name, __cb);
        try
        {
            __result.__prepare(__finishStream_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            MarkerHelper.write(__os, markerForFinish);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_finishStream(Ice.AsyncResult __result)
        throws GenericError
    {
        Ice.AsyncResult.__check(__result, this, __finishStream_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(GenericError __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __modifyTransport_name = "modifyTransport";

    public void modifyTransport(Components.TransportProfile tpformodify)
        throws GenericError
    {
        modifyTransport(tpformodify, null, false);
    }

    public void modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx)
        throws GenericError
    {
        modifyTransport(tpformodify, __ctx, true);
    }

    private void modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws GenericError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "modifyTransport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("modifyTransport");
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.modifyTransport(tpformodify, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify)
    {
        return begin_modifyTransport(tpformodify, null, false, null);
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx)
    {
        return begin_modifyTransport(tpformodify, __ctx, true, null);
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, Ice.Callback __cb)
    {
        return begin_modifyTransport(tpformodify, null, false, __cb);
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_modifyTransport(tpformodify, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, Callback_Sink_modifyTransport __cb)
    {
        return begin_modifyTransport(tpformodify, null, false, __cb);
    }

    public Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx, Callback_Sink_modifyTransport __cb)
    {
        return begin_modifyTransport(tpformodify, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_modifyTransport(Components.TransportProfile tpformodify, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__modifyTransport_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __modifyTransport_name, __cb);
        try
        {
            __result.__prepare(__modifyTransport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            tpformodify.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_modifyTransport(Ice.AsyncResult __result)
        throws GenericError
    {
        Ice.AsyncResult.__check(__result, this, __modifyTransport_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(GenericError __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __releaseTransport_name = "releaseTransport";

    public void releaseTransport()
    {
        releaseTransport(null, false);
    }

    public void releaseTransport(java.util.Map<String, String> __ctx)
    {
        releaseTransport(__ctx, true);
    }

    private void releaseTransport(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "releaseTransport", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.releaseTransport(__ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_releaseTransport()
    {
        return begin_releaseTransport(null, false, null);
    }

    public Ice.AsyncResult begin_releaseTransport(java.util.Map<String, String> __ctx)
    {
        return begin_releaseTransport(__ctx, true, null);
    }

    public Ice.AsyncResult begin_releaseTransport(Ice.Callback __cb)
    {
        return begin_releaseTransport(null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseTransport(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_releaseTransport(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_releaseTransport(Callback_Sink_releaseTransport __cb)
    {
        return begin_releaseTransport(null, false, __cb);
    }

    public Ice.AsyncResult begin_releaseTransport(java.util.Map<String, String> __ctx, Callback_Sink_releaseTransport __cb)
    {
        return begin_releaseTransport(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_releaseTransport(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __releaseTransport_name, __cb);
        try
        {
            __result.__prepare(__releaseTransport_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            __result.__writeEmptyParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_releaseTransport(Ice.AsyncResult __result)
    {
        __end(__result, __releaseTransport_name);
    }

    private static final String __startStream_name = "startStream";

    public void startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp)
        throws GenericError
    {
        startStream(previous, theMarker, sp, tp, null, false);
    }

    public void startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx)
        throws GenericError
    {
        startStream(previous, theMarker, sp, tp, __ctx, true);
    }

    private void startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws GenericError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "startStream", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("startStream");
                    __delBase = __getDelegate(false);
                    _SinkDel __del = (_SinkDel)__delBase;
                    __del.startStream(previous, theMarker, sp, tp, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp)
    {
        return begin_startStream(previous, theMarker, sp, tp, null, false, null);
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx)
    {
        return begin_startStream(previous, theMarker, sp, tp, __ctx, true, null);
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, Ice.Callback __cb)
    {
        return begin_startStream(previous, theMarker, sp, tp, null, false, __cb);
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_startStream(previous, theMarker, sp, tp, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, Callback_Sink_startStream __cb)
    {
        return begin_startStream(previous, theMarker, sp, tp, null, false, __cb);
    }

    public Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx, Callback_Sink_startStream __cb)
    {
        return begin_startStream(previous, theMarker, sp, tp, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_startStream(PreviouAction previous, byte[] theMarker, StreamProfile sp, Components.TransportProfile tp, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__startStream_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __startStream_name, __cb);
        try
        {
            __result.__prepare(__startStream_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            previous.__write(__os);
            MarkerHelper.write(__os, theMarker);
            sp.__write(__os);
            tp.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_startStream(Ice.AsyncResult __result)
        throws GenericError
    {
        Ice.AsyncResult.__check(__result, this, __startStream_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(GenericError __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.__readEmptyParams();
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    public static SinkPrx checkedCast(Ice.ObjectPrx __obj)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SinkPrx)
            {
                __d = (SinkPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    SinkPrxHelper __h = new SinkPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SinkPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SinkPrx)
            {
                __d = (SinkPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    SinkPrxHelper __h = new SinkPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SinkPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    SinkPrxHelper __h = new SinkPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SinkPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    SinkPrxHelper __h = new SinkPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SinkPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof SinkPrx)
            {
                __d = (SinkPrx)__obj;
            }
            else
            {
                SinkPrxHelper __h = new SinkPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SinkPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SinkPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SinkPrxHelper __h = new SinkPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Components::Streams::Sink",
        "::Ice::Object"
    };

    public static String ice_staticId()
    {
        return __ids[0];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _SinkDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _SinkDelD();
    }

    public static void __write(IceInternal.BasicStream __os, SinkPrx v)
    {
        __os.writeProxy(v);
    }

    public static SinkPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SinkPrxHelper result = new SinkPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
